#!/bin/bash -e

test -e /var/run/mysqld || install -m 755 -o mysql -g root -d /var/run/mysqld

chown mysql:adm /var/log/mysql
chmod 700 /var/lib/mysql
chown mysql:mysql /var/lib/mysql

# If directory is empty, we restore it from our copy of initial MySQL database files.
[[ $(ls -A /var/lib/mysql | grep -v placeholder) ]] || cp -a /var/lib/mysql.orig/* /var/lib/mysql/

# Ensure that data has proper permissions, if MYSQL_DATA_CHOWN is set.
if [[ -n "${MYSQL_DATA_CHOWN}" && -d /var/lib/mysql && ! -f /dev/shm/mysql_data_chown_ran ]]; then
  # We want this to run only the first time inside a new container. And not
  # after runit restarts the service because of some issues with the service.
  touch /dev/shm/mysql_data_chown_ran
  # We run it in a background because it can potentially take a long time.
  # We run it in a subshell to disown it so that current process does not have
  # to wait for it. This prevents zombies.
  (chown -Rh mysql:mysql /var/lib/mysql &)
fi

# Is there any other script to run here?
[ -f /etc/service/mysql/run.initialization ] && source /etc/service/mysql/run.initialization

if [ -e /etc/init.d/mariadb ]; then
  # There is no need to set debian-sys-maint password because with 10.4+ there is unix
  # socket authentication instead (which on Ubuntu is when /etc/init.d/mariadb has been made).
else
  # We set debian-sys-maint password which might be in this Docker image different for existing data.

  PASSWORD=$(grep password /etc/mysql/debian.cnf | awk '{print $3}' | head -1)

  # If any of the following commands fails we want to shutdown temporary MySQL instance.
  trap "/etc/init.d/mysql stop" EXIT

  # Temporary MySQL instance with permissions disabled.
  /usr/bin/mysqld_safe --skip-grant-tables --bind-address 127.0.0.1 --skip-syslog --log-error=/var/log/mysql/error.log &

  for i in $(seq 1 30); do
    sleep 1
    if /etc/init.d/mysql status > /dev/null ; then break; fi
  done

  /usr/bin/mysql -u root -D mysql -e "update user set password=password('$PASSWORD') where user='debian-sys-maint'"

  # Is there any other script to run here?
  [ -f /etc/service/mysql/run.permissions ] && source /etc/service/mysql/run.permissions

  /etc/init.d/mysql stop > /dev/null

  # Wait a bit, so that all processes are really gone.
  sleep 1
fi

exec /usr/bin/mysqld_safe --skip-syslog --log-error=/var/log/mysql/error.log 2>&1 >> /var/log/mysql/error.log
